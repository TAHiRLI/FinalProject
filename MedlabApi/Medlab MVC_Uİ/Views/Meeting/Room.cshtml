@model CallRoomViewModel

@*<h1>Doctor: @Model.Doctor.Fullname, Doctor UserId : @Model.Doctor.AppUser?.Id</h1>*@
<div video-grid></div>
<h1>@Model.AppointmentId</h1>
<video id="localVideo" autoplay> </video>

<button id="hangup" class="btn  btn-danger">Close</button>
<button id="end" class="btn  btn-danger">end time</button>








@section Scripts {



    <script>
        const ROOM_ID = "@ViewBag.roomId"
        let userId = null;
        let localStream = null;
        let appointmentId = "@Model.AppointmentId";
        const Peers = {};

        const myPeer = new Peer()


        const connection = new signalR.HubConnectionBuilder().withUrl("/meetingHub").build();


        myPeer.on('open', (id) => {
            userId = id;

            const startSignalR = async () => {
                await connection.start();
                await connection.invoke("JoinRoom", ROOM_ID, userId, appointmentId);
                await connection.invoke("setPeerId", userId);
            }
            startSignalR();
        })

        const videoGrid = document.querySelector('[video-grid]')
        const myVideo = document.createElement("video");
        myVideo.muted = true;

        navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true
        }).then(stream => {
            addVideoStream(myVideo, stream);
            localStream = stream;
        })



        connection.on("user-connected", (id) => {
            if (userId === id) return;
            console.log(`user connected : ${id}`)
            connectNewUser(id, localStream);
          

        })

        connection.on("user-disconnected", (id) => {
            console.log(`user disconnected : ${id}`);

            if (Peers[id])
                Peers[id].close();
        })

        myPeer.on("call", (call) => {
            call.answer(localStream);

            const userVideo = document.createElement("video");
            call.on('stream', (userVideoSream) => {
                addVideoStream(userVideo, userVideoSream)
            })
        })


        const addVideoStream = (video, stream) => {
            video.srcObject = stream;
            video.addEventListener("loadedmetadata", () => {
                video.play()
            })

            videoGrid.appendChild(video);

        }




        const connectNewUser = (userId, localStream) => {
            const userVideo = document.createElement("video");
            const call = myPeer.call(userId, localStream);
            call.on("stream", (userVideoStream) => {
                addVideoStream(userVideo, userVideoStream)
            })
            call.on("close", () => {
                SetEndTIme(appointmentId);
                userVideo.remove();
                document.location.replace("/") ;
            })

            Peers[userId] = call
            console.log(Peers);


        }

        $("#hangup").on("click", ()=>{
            document.location.replace("/");
           
        })
        $("#end").on("click", ()=>{
            SetEndTIme(appointmentId)
        })

     
        async function SetEndTIme(appointmentId) {

            await connection.invoke("SetEndTime", appointmentId);
        }




    </script>



    }

