@model CallRoomViewModel

<div class="container position-relative">
    <div class="row">
        <div class="col-md-9">
            <div class="video-container" video-grid></div>
        </div>
        <div class="col-md-3">
            <div class="appointment-info">
                <h2>Doctor: @Model.Doctor.Fullname</h2>
                <p>Appointment ID: @Model.AppointmentId</p>
            </div>
            <button id="hangup" class="btn btn-danger rounded-pill"><i class="fa-solid fa-phone-slash text-light"></i></button>
            <button id="VideoClose" class="btn rounded-pill btn-dark"><i class="fa-solid fa-microphone-slash text-light"></i></button>
            <button id="MicClose" class="btn rounded-pill btn-dark "><i class="fa-solid fa-video-slash text-light"></i></button>
        </div>
    </div>
</div>







@section Scripts {



    <script>
        const ROOM_ID = "@ViewBag.roomId"
        let userId = null;
        let localStream = null;
        let appointmentId = "@Model.AppointmentId";
        const Peers = {};

        let isAudioEnabled = true;
        let isVideoEnabled = true;

        $("#VideoClose").on("click", toggleAudio);
        $("#MicClose").on("click", toggleVideo);

        const myPeer = new Peer()


        const connection = new signalR.HubConnectionBuilder().withUrl("/meetingHub").build();


        myPeer.on('open', (id) => {
            userId = id;
            console.log(userId);
            const startSignalR = async () => {
                await connection.start();
                await connection.invoke("JoinRoom", ROOM_ID, userId, appointmentId);
                await connection.invoke("setPeerId", userId);
            }
            startSignalR();
        })

        const videoGrid = document.querySelector('[video-grid]')
        const myVideo = document.createElement("video");
        myVideo.setAttribute("id", "myvideo")
        myVideo.muted = true;

        navigator.mediaDevices.getUserMedia({
            audio: true,
            video: true
        }).then(stream => {
            addVideoStream(myVideo, stream);
            localStream = stream;
        })



        connection.on("user-connected", (id) => {
            if (userId === id) return;
            console.log(`user connected : ${id}`)
            connectNewUser(id, localStream);


        })

        connection.on("user-disconnected", (id) => {
            console.log(`user disconnected : ${id}`);
            if (Peers[id])
                call.close();
        })

        myPeer.on("call", (call) => {
            call.answer(localStream);

            const userVideo = document.createElement("video");
            call.on('stream', (userVideoSream) => {
                addVideoStream(userVideo, userVideoSream)
            })
        })


        const addVideoStream = (video, stream) => {
            video.srcObject = stream;
            video.addEventListener("loadedmetadata", () => {
                video.play()
            })

            videoGrid.appendChild(video);

        }




        const connectNewUser = (userId, localStream) => {
            const userVideo = document.createElement("video");
            const call = myPeer.call(userId, localStream);
            call.on("stream", (userVideoStream) => {
                addVideoStream(userVideo, userVideoStream)
            })
            call.on("close", () => {
                SetEndTIme(appointmentId);
                userVideo.remove();
                document.location.replace("/");
            })

            Peers[userId] = call
            console.log(Peers);


        }

        $("#hangup").on("click", () => {
            CloseCall(appointmentId);
        })
        connection.on("Rejected", () => {
            Swal.fire({
                html: ` <div> <p class=" text-center h1 " style = "font-family:cursive;" > Doctor Rejected To Join</ p>
                        <video playsinline autoplay muted loop class= "w-50 m-auto d-block" >
                        <source src="../../Assets/Images/reject-phone-call.mp4" type = "video/mp4" />
                        </video>
                        </div> `,

            }).then(()=>{
                window.location.replace("/")
            })
        })

        connection.on("CallClosed",()=>{

            Swal.fire({
                html: ` <div> <p class=" text-center h1 " style = "font-family:cursive;" >Call Ended </ p>
                                <video playsinline autoplay muted loop class= "w-50 m-auto d-block" >
                                        <source src="../../Assets/Images/handup.mp4" type = "video/mp4" />
                                </video>
                                </div> `,

            }).then(() => {
                window.location.replace("/")
            })
        })



        async function SetEndTIme(appointmentId) {

            await connection.invoke("SetEndTime", appointmentId);
        }

        async function CloseCall(appointmentId) {

            await connection.invoke("CloseCall", appointmentId);
            await connection.invoke("SetEndTime", appointmentId);

        }

        function toggleAudio() {
            localStream.getAudioTracks().forEach(track => {
                track.enabled = !isAudioEnabled;
            });
            isAudioEnabled = !isAudioEnabled;
            $("#VideoClose").html(isAudioEnabled ? "<i class='fa-solid fa-microphone-slash text-light'></i>" : "<i class='fa-solid fa-microphone text-light'></i>");
        }
        function toggleVideo() {
            localStream.getVideoTracks().forEach(track => {
                track.enabled = !isVideoEnabled;
            });
            isVideoEnabled = !isVideoEnabled;
            $("#MicClose").html(isVideoEnabled ? "<i class='fa-solid fa-video-slash text-light'></i>" : "<i class='fa-solid fa-video text-light'></i>");
        }

    </script>



    }

